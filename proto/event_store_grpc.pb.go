// event_store.proto
// gRPC service tanımı - HTTP'deki API endpoint'lerin karşılığı

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: proto/event_store.proto

// Package name - Go'da namespace olur

package eventstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventStoreService_GetAggregateEvents_FullMethodName = "/eventstore.EventStoreService/GetAggregateEvents"
)

// EventStoreServiceClient is the client API for EventStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =====================================================
// SERVICE TANIMI (HTTP'deki Router'a benzer)
// =====================================================
type EventStoreServiceClient interface {
	// HTTP karşılığı: GET /events/aggregate/:id
	GetAggregateEvents(ctx context.Context, in *GetAggregateEventsRequest, opts ...grpc.CallOption) (*GetAggregateEventsResponse, error)
}

type eventStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStoreServiceClient(cc grpc.ClientConnInterface) EventStoreServiceClient {
	return &eventStoreServiceClient{cc}
}

func (c *eventStoreServiceClient) GetAggregateEvents(ctx context.Context, in *GetAggregateEventsRequest, opts ...grpc.CallOption) (*GetAggregateEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAggregateEventsResponse)
	err := c.cc.Invoke(ctx, EventStoreService_GetAggregateEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventStoreServiceServer is the server API for EventStoreService service.
// All implementations must embed UnimplementedEventStoreServiceServer
// for forward compatibility.
//
// =====================================================
// SERVICE TANIMI (HTTP'deki Router'a benzer)
// =====================================================
type EventStoreServiceServer interface {
	// HTTP karşılığı: GET /events/aggregate/:id
	GetAggregateEvents(context.Context, *GetAggregateEventsRequest) (*GetAggregateEventsResponse, error)
	mustEmbedUnimplementedEventStoreServiceServer()
}

// UnimplementedEventStoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventStoreServiceServer struct{}

func (UnimplementedEventStoreServiceServer) GetAggregateEvents(context.Context, *GetAggregateEventsRequest) (*GetAggregateEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregateEvents not implemented")
}
func (UnimplementedEventStoreServiceServer) mustEmbedUnimplementedEventStoreServiceServer() {}
func (UnimplementedEventStoreServiceServer) testEmbeddedByValue()                           {}

// UnsafeEventStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStoreServiceServer will
// result in compilation errors.
type UnsafeEventStoreServiceServer interface {
	mustEmbedUnimplementedEventStoreServiceServer()
}

func RegisterEventStoreServiceServer(s grpc.ServiceRegistrar, srv EventStoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventStoreService_ServiceDesc, srv)
}

func _EventStoreService_GetAggregateEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggregateEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServiceServer).GetAggregateEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStoreService_GetAggregateEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServiceServer).GetAggregateEvents(ctx, req.(*GetAggregateEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventStoreService_ServiceDesc is the grpc.ServiceDesc for EventStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventstore.EventStoreService",
	HandlerType: (*EventStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregateEvents",
			Handler:    _EventStoreService_GetAggregateEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/event_store.proto",
}
