services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 5s
      timeout: 3s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  postgres-auth:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_AUTH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
      POSTGRES_DB: ${POSTGRES_AUTH_DB}
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_AUTH_USER}"]
      interval: 5s
      timeout: 3s
      retries: 10

  postgres-query:
    image: postgres:15-alpine
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_QUERY_USER}
      POSTGRES_PASSWORD: ${POSTGRES_QUERY_PASSWORD}
      POSTGRES_DB: ${POSTGRES_QUERY_DB}
    volumes:
      - postgres-query-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_QUERY_USER}"]
      interval: 5s
      timeout: 3s
      retries: 10

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    environment:
      DB_HOST: postgres-auth
      DB_USER: ${POSTGRES_AUTH_USER}
      DB_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
      DB_NAME: ${POSTGRES_AUTH_DB}
      DB_PORT: 5432
      DB_SSLMODE: disable
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      postgres-auth:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: on-failure

  query-service:
    build:
      context: ./query-service
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    environment:
      DB_HOST: postgres-query
      DB_USER: ${POSTGRES_QUERY_USER}
      DB_PASSWORD: ${POSTGRES_QUERY_PASSWORD}
      DB_NAME: ${POSTGRES_QUERY_DB}
      DB_PORT: 5432
      DB_SSLMODE: disable
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KAFKA_GROUP: ${KAFKA_GROUP}
    depends_on:
      postgres-query:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: on-failure

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 5s
      timeout: 3s
      retries: 10

  event-store:
    build:
      context: ./event-store
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    environment:
      CLICKHOUSE_HOST: ${CLICKHOUSE_HOST}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      KAFKA_GROUP: event-store-group
      PORT: 8090
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: on-failure

volumes:
  postgres-auth-data:
  postgres-query-data:
  clickhouse-data:
